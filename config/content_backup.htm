<h1>Introduction</h1>
<p>Github:  <a href="https://github.com/40823111/cd2021">許耀中的Github</a></p>
<pre class="tw-data-text tw-text-large XcVN5d tw-ta" data-placeholder="翻譯" dir="ltr"><span lang="en">Website:<a href="https://40823111.github.io/cd2021/.">許耀中的</a></span><a href="https://40823111.github.io/cd2021/."><span lang="en">Website</span></a></pre>
<p><br/><br/>Youtube:<a href="https://studio.youtube.com/channel/UCDwHWerqlhllVN1FmKCBYJg/videos/upload?filter=%5B%5D&amp;sort=%7B%22columnType%22%3A%22date%22%2C%22sortOrder%22%3A%22DESCENDING%22%7D">許耀中的Youtube</a><br/><br/>Stage1<br/><br/>分組倉儲: <a href="https://40823111.github.io/stage1-ag6/content/index.html">stage1 ag6</a></p>
<p><span>Stage2</span></p>
<p><span><span>分組倉儲: <a href="https://40823111.github.io/stage2-ag6/content/index.html">stage2 ag6</a></span></span></p>
<p>Stage3</p>
<p><br/><span>分組倉儲: <a href="https://40823111.github.io/stage3-ag5/">stage3 ag5</a></span><br/><br/><span lang="en"></span></p>
<p></p>
<h1>leo</h1>
<h2>edit blog</h2>
<p>一開始你的leo是黑色的， 如果你想換成白色的</p>
<p>step1. 到File裡的 Open-Outline</p>
<p><img alt="" height="494" src="/images/螢幕擷取畫面 2021-03-08 001936.png" width="317"/></p>
<p>Step2.進到你的tmp<span>→cd2021→config</span></p>
<p><img alt="" height="350" src="/images/1615134022081.jpg" width="554"/></p>
<p>Step3. touch pelican.leo</p>
<p><img alt="" height="347" src="/images/1615134032445.jpg" width="553"/></p>
<p></p>
<p>新建disqus</p>
<p><img alt="" height="549" src="/images/1615132385371.jpg" width="560"/></p>
<p></p>
<p>改設定到遠端的pelican 劃紅線的是需要改的設定  discqus sitename 填你新建disqus的名字(Webside name)</p>
<p><img alt="" height="313" src="/images/1615133741671.jpg" width="563"/></p>
<p>指令 @others 就是可以當編輯這個網頁要編輯下一張的時候，下一張的開頭位置會是你上一張結尾的後面</p>
<p>可以繼續編排不會亂</p>
<p></p>
<h2>edit Reveal</h2>
<p>1.先進入Leo</p>
<p><img alt="" height="282" src="/images/1615380265464.jpg" width="562"/></p>
<p>2.到cd2021<span>➝config</span></p>
<p><img alt="" height="356" src="/images/1615134022081.jpg" width="564"/></p>
<p>3.選擇下面的reveal.leo</p>
<p><img alt="" height="347" src="/images/1615380359702.jpg" width="561"/></p>
<p>4.就可以開始編輯了</p>
<p><img alt="" height="382" src="/images/1615380702356.jpg" width="562"/></p>
<h1>old repositories update</h1>
<p>1.因為舊的repositiors和更新版只差7個更新檔案，所以只需要git pull 更新檔案就好、所以</p>
<p>Step1.到你的cmsimde <span>→ </span>git pull origin master</p>
<p><img alt="" height="292" src="/images/1.jpg" width="560"/></p>
<p>Step2.他就會顯示已經download 7個檔案</p>
<p><img alt="" height="291" src="/images/2.jpg" width="560"/></p>
<p>檔案說明:</p>
<ol>
<li><span>init.py</span><span> </span>- 其中的 site_title, ip 與 port 可以讓使用者自行修改, site_title 是網站標題, ip 為動態網站啟動時所使用的網路位址, 可設為內部或外部 IPv4 (IPv6), port 則是動態網站啟動時所佔用的埠號.</li>
<li><span>http-server.py</span><span> </span>- 執行後會使用內建的 localhost 與 port 8444 伺服 content 子目錄中的 CMSiMDE 靜態網頁.</li>
<li><span>cms.bat</span><span> </span>- 讓使用者執行動態網站用的批次檔案.</li>
<li><span>acp.bat</span><span> </span>- 若使用者已經將倉儲設為 ssh 連線, 且提供遠端與近端的認證模式, 則可以在執行此批次指令之後加上提交字串, 即可執行 git add ., git commit -m "提交訊息", 以及 git push 等三個指令.</li>
</ol>
<p></p>
<p>Step3. 到你的 updir 把你的更新檔複製到你的cd2021<span>→ complete→ 以後你的工作都在cd2021</span></p>
<p><img alt="" height="575" src="/images/3.jpg" width="563"/></p>
<p>Step4.</p>
<p>以後要開cmsimde(到你的cd2021)=cms(動態就會自己開)</p>
<p><span>以後要開上傳(到你的cd2021)=acp </span></p>
<h1>repositories create</h1>
<p><span>notice: 因為cmsimde改版 所以設定全部更新</span></p>
<p><span>(1)system <a href="https://github.com/mdecourse/cd2021/discussions/7">cd2021可攜系統 </a></span></p>
<p><span>(2)download  <a href="https://drive.google.com/file/d/1R6vAAWdNDigmyvFFQTKyM-XNKOWeCFJU/view">kmol2021 spring  v2.7z</a></span></p>
<p><span>(3) 改 gitconfig</span><span> </span></p>
<p><strong><strong style="font-style: italic;"> </strong></strong></p>
<p><span><img alt="" height="447" src="/images/1615443540301.jpg" width="567"/></span></p>
<p><span><img alt="" height="747" src="/images/1615443508822.jpg" width="563"/></span></p>
<p><span></span></p>
<p>(4)Repository:<span> </span><a href="https://github.com/mdecourse/cmstemplate">https://github.com/mdecourse/cmstemplate</a></p>
<p>  利用 cmstemplate 建立以 CMSiMDE 作為子模組的動態與靜態網站方法為:</p>
<ol>
<li>登入 Github 帳號</li>
<li>將瀏覽器指向<span> </span><a href="https://github.com/mdecourse/cmstemplate">https://github.com/mdecourse/cmstemplate</a></li>
</ol>
<p><img alt="" height="308" src="/images/1615446445939.jpg" width="563"/></p>
<p><span> (5) inside the page 填寫資料</span></p>
<p><span><img alt="" height="254" src="/images/1615379419301.jpg" width="569"/></span></p>
<p><span>(6) 打指令 git clone --recurse-submodules https://github.com/40823111/cd2021.git</span></p>
<p><span><img alt="" height="289" src="/images/1615441848121.jpg" width="555"/></span></p>
<p>(7)進入 cd2021<span>→cmsimde→up_dir(裡面有5個檔案)</span></p>
<p><img alt="" height="477" src="/images/螢幕擷取畫面 2021-03-11 152457.png" width="560"/></p>
<p></p>
<p>(7) 完成後 就可以git push</p>
<p>acp.bat 內容</p>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false">echo off
set message=%1
git add .
git commit -m %message%
git push</pre>
<p><img alt="" height="288" src="/images/螢幕擷取畫面 2.png" width="554"/></p>
<p><span></span></p>
<p></p>
<h1>stage1</h1>
<h2>week1</h2>
<p>第一階段分組協同實習:</p>
<p>每週分組報告必須包含 html, pdf 與 Youtube 影片:</p>
<p>標題:<span> </span><span>2021-協同產品設計實習-stage1-ag1</span></p>
<p>專題題目:</p>
<p>第一位組員學號:40823111</p>
<p>第二位組員學號:40823139</p>
<p></p>
<p></p>
<p>交付給各組的實習任務:</p>
<ol>
<li><span>請在各組組長的 Github 帳號下建立各組的分組網站, 惟在 W1 進行各班定組序過程中, 發現即便採用 Ethercalc 以網際協同方式同步讓各班自選組員填入兩兩成組的學員學號, 但仍缺人工或自動定各班組序的有效方案, 在此責成各組在進行自選的協同產品開發項目之際 (W2-W4), 將此議題列為必選的題目之一, 詳細說明各組認為最有效率的第一階段與訂定組序的方法及流程.</span></li>
<li><span>此外, 為了讓各組在 stage1 分組協同實習過程, 能透過網誌發表各組組員在 W2-W4 過程中的各項作為與心得報告, 說明可利用 Leo Editor 協助 CMSiMDE 中的 Pelican 發表協同網誌, 其目的是讓各分組在協同期間, 能完整呈現各階段所留下的網誌紀錄. 但此方式必須熟悉 Leo Editor 的操作, 因此有關透過 Pelican 建立協同網誌一事, 除利用 Leo Editor 協助設定並建立 pelican 網誌外, 也將此議題列為各組在 Stage1 協同產品設計流程中必選題目之二, 請各組詳細說明採用或不採用 Leo Editor 的兩種情況下, 各組員在設定與建立協同網誌的過程所可能遭遇或產生的問題與解決方案.</span></li>
</ol>
<h2>week2</h2>
<p>我們的主題 及 進度說明</p>
<p><span>題目:套圈遊樂器</span><br/><span>動機:經常於夜市中看到的套圈圈，於軟體中進行模擬與參數調整，對其分析統整，求得各類結果</span><br/><span>第二周:零件創建與機構改善</span><br/><span>第三周:軟體模擬與程式編輯</span><br/><span>第四周:統整結果與報告內容</span></p>
<p><span></span></p>
<p><span>這是把圈圈送到上面的運輸機構</span></p>
<p><img alt="" height="380" src="/images/1615381525022.jpg" width="566"/></p>
<h2>week3</h2>
<h4>機構 程式</h4>
<p>1.機構完成 運送機構改善配合及組裝(inventor 組合圖)</p>
<p><img alt="" height="400" src="/images/1615645697398.jpg" width="558"/></p>
<p> 各種零件檔</p>
<p>2.程式模擬(測試爪子的路徑和抓的力道)</p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/fbIq6b8Xybo" width="560"></iframe></p>
<h4>改良</h4>
<p>1.因為前面設計的機構太過理想，雖然在inventor上可以模擬，但是到CoppeliaSim由於干涉太多及運動過程中會有震動，導致圈圈沒辦法正常運送</p>
<p></p>
<h2>week4</h2>
<p>1.工程圖</p>
<p><img alt="" height="402" src="/images/Inventor_9Oy4NiufCt.png" width="571"/></p>
<p></p>
<p>2.爆炸圖</p>
<p><img alt="" height="394" src="/images/Inventor_7MZQCBKZ7G.png" width="568"/></p>
<p></p>
<p>3.完成品</p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/md3fNab1UXo" width="560"></iframe></p>
<h1>stage2</h1>
<h2>week5</h2>
<p>step2 題目 : 自動打球機及手動接球</p>
<p>設計 自動送球機構 及 接球手套 機械手臂打球(打者) 和 手動機械手臂接球(防守者)</p>
<h2>week6</h2>
<h4>設計理想</h4>
<ol>
<li>一個平台(棒球場) 球打出去後可以接球(防守者) 漏接的球可以自動流回輸送台，再次被送回來</li>
<li>使用類似螺紋的概念把球輸送到想要的平台</li>
<li>希望可以把球的軌跡沿著螺旋線上升</li>
<li>做成一個循迴機構</li>
</ol>
<h4>創建協同</h4>
<p>step1 組長創一個創一個respoitory    組員創一個和組長一模一樣的<span>respoitory的名子</span></p>
<p><span>step2 在github裡new respoitory 互相邀請 </span></p>
<p>step3 組長 git clone --recurse-submodules https://github.com/40823111/cd2021.git</p>
<p><img alt="" height="296" src="/images/1615441848121.jpg" width="567"/></p>
<p>step3  git remote add 組員的學號 https://github.com/<span>組員的學號</span>/stage2-ag6.git</p>
<p>          組長授權給組員</p>
<p>流程示意圖</p>
<p><img alt="" height="426" src="/images/222.jpg" width="567"/></p>
<h2>week7</h2>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/Y33taPcSXP0" title="YouTube video player" width="560"></iframe></p>
<p>模擬失敗 </p>
<p> 問題 1. 因為我們是設計螺旋線的上升機構， 所以到輸送平台時把它用直線，導致不符合公差尺寸而跑掉</p>
<p> 解決1. <span>改善後 把它改成符合螺旋線的入口</span></p>
<p><img alt="" height="425" src="/images/44085.jpg" width="239"/>   <img alt="" height="239" src="/images/messageImage_1618473034644.jpg" width="302"/></p>
<h4>CoppeliaSim模擬與運送機構創建</h4>
<p>整體運用重點:</p>
<ol>
<li>向本週主軸:CoppeliaSim模擬與運送機構創建</li>
</ol>
<p>整體運用重點:</p>
<ol>
<li>IK逆運動學</li>
<li>正向運動學</li>
<li>送球機構創建</li>
</ol>
<p>本週問題:</p>
<ol>
<li>多軸手臂的運動預測</li>
<li>送球機構創建未果</li>
<li>球受力後的運動路徑預測</li>
</ol>
<p>問題改善:</p>
<ol>
<li>藉由DH法做運動預期</li>
<li>加入運動學運算</li>
</ol>
<h2>week8</h2>
<h4>送球機構</h4>
<p>問題1 : <span>球進不去 只能靠後面球的推力才可以勉強塞進去</span></p>
<p></p>
<p></p>
<p></p>
<p><span>問題2. 球進去後機構也沒辦法把球推上去 因為斜角太斜導致球會網協度相對小的地方(入口)滾動</span></p>
<p><span></span></p>
<p><span></span></p>
<p><span></span></p>
<p><span></span></p>
<p><span></span></p>
<p><span>改善: 斜度改小 把凹槽加長 使凹槽和倒角之間有一個倒三角形可以讓球跑到裡面卡住 不會往後滾</span></p>
<h2>week9</h2>
<p></p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/pLdbxNwan2k" title="YouTube video player" width="560"></iframe></p>
<p></p>
<p><a href="https://github.com/40823111/cd2021/blob/main/123/final.ttt">棒球模擬機.ttt</a></p>
<h1>stage3</h1>
<h2>week10</h2>
<h3>task1</h3>
<p><span>讀取 stage3_2a.txt, 建立 Stage3 的分組倉儲, 分組網頁, 以及各組員倉儲及網頁連結</span></p>
<p><span></span></p>
<h3>task2</h3>
<p><span>採 Python remote API 進行操控</span></p>
<p><span></span></p>
<p><span>step1  </span></p>
<p><span>先把5個檔案放在同一個資料夾</span></p>
<p><span></span></p>
<p><span><img alt="" height="149" src="/images/1621441859591.jpg" width="566"/></span></p>
<p><span>step2</span></p>
<p><span>打開CoppliaSim(4.2.0)把你要的檔案丟進去  </span></p>
<p><span><img alt="" height="408" src="/images/1621441935131.jpg" width="564"/></span></p>
<p><span></span></p>
<p><span></span>step3</p>
<p><span>把程式複製放在主體的上面(如果沒有可以自己新增)</span></p>
<p><img alt="" height="418" src="/images/1621442379740.jpg" width="288"/></p>
<p></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">threadFunction=function()
	-- Put your thread code here (initialization and clean-up code should not be in here)

	
	-- Some EXTERNAL commands (e.g. socket commands provided by Lua libraries)
	-- might appear as blocking to the simulator. In that case, you can define
	-- a non-blocking section as following example shows:
	--
	-- sim.setThreadIsFree(true) -- Start of the non-blocking section
	--
	-- Following 2 lines are meant as an example of EXTERNAL blocking commands:
	-- http = require("socket.http")
	-- print(http.request("http://www.google.com"))
	--
	-- sim.setThreadIsFree(false) -- End of the non-blocking section
	--
	-- While in a non-blocking section, try to avoid calling sim-functions. Also
	-- never forget to close the blocking section, otherwise V-REP will hang.
	-- Make sure you read the information related to the sim.setThreadIsFree
	-- API function in V-REP's documentation.


	-- If you wish to synchronize a threaded loop with each simulation pass,
	-- set the thread switch timing in the initialization phase of this script
	-- to the maximum (200), and manually switch thread here with the
	-- sim.switchThread() command. 
	-- ( sim.switchThread() will suspend this script's execution until next
	-- simulation pass, i.e. until the simulation time has changed )
	--
	-- Following example illustrates this:
	-- 
	-- while true do
	--     local p=sim.getObjectPosition(objHandle,-1)
	--     p[1]=p[1]+0.001
	--     sim.setObjectPosition(objHandle,-1,p)
	--     sim.switchThread()
	-- end
end

-- Put some initialization code here:
sim.setThreadSwitchTiming(2) -- Default timing for automatic thread switching

-- Here we execute the regular thread code:
res,err=xpcall(threadFunction,function(err) return debug.traceback(err) end)
if not res then
	sim.addStatusbarMessage('Lua runtime error: '..err)
end

-- Put some clean-up code here:
simRemoteApi.start(19999)
</pre>
<h2>week11</h2>
<h3>task3</h3>
<p>影片直播</p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/BaqrJgY4yKA" title="YouTube video player" width="560"></iframe></p>
<h2>week12</h2>
<h3>topic</h3>
<p>題目 </p>
<p></p>
<p>下載 RoboDK 5.2.2 及pick and place</p>
<p> <a href="https://drive.google.com/file/d/13dzUp_j6U2PBHY1Gzl_1tzxSg7ULT8qi/view?usp=sharing">下載 RoboDK 5.2.2 可攜程式</a><span><span> </span>(</span><a href="https://drive.google.com/file/d/1IhQK5TRQTBBegG2LizypdE-i39n_T7fO/view?usp=sharing">5.2.3</a><span>) - 可用於工業機械手臂離線設計與模擬</span></p>
<p><span><a href="https://drive.google.com/file/d/1XoB3F5cPK8R4Y8AIWL5pKR5TQjPW8TRv/view?usp=sharing">Pick and Place 檔案下載</a></span></p>
<p><span>開啟 Pick and Place 專案檔案後, Python 以 pip install robodk 後, 可以開啟下列控制程式, 逐一由機械手臂將球從 Table1 取放至 Table2, 圓球排列方式採 </span><a href="https://en.wikipedia.org/wiki/Square_pyramid">Square Pyramid</a><span>. 使用者可精確送出各球座標位置, 導引機械手臂取放圓球</span></p>
<p></p>
<h3>影片直播</h3>
<p>第一支</p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/DxpgK7z7EH0" title="YouTube video player" width="560"></iframe></p>
<p>第二支</p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/2ypzUa548uc" title="YouTube video player" width="560"></iframe></p>
<h2>week13</h2>
<h3>RoboDK 機械手臂 Pick and Place Python API 程式:</h3>
<p><a href="https://drive.google.com/file/d/13dzUp_j6U2PBHY1Gzl_1tzxSg7ULT8qi/view?usp=sharing">下載 RoboDK 5.2.2 可攜程式</a><span><span> </span>(</span><a href="https://drive.google.com/file/d/1IhQK5TRQTBBegG2LizypdE-i39n_T7fO/view?usp=sharing">5.2.3</a><span>) </span></p>
<p><span>完整的 </span><a href="https://drive.google.com/file/d/1XoB3F5cPK8R4Y8AIWL5pKR5TQjPW8TRv/view?usp=sharing">Pick and Place 檔案下載</a></p>
<p><a href="https://drive.google.com/file/d/1WRX6i6cA_f8ER6kN8yNwt1sdZTLMhl4J/view?usp=sharing">下載 CoppeliaSim 4.1.0 可攜程式</a><span><span> </span>(使用舊版的) </span></p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/sQ6QacdSuYY" title="YouTube video player" width="560"></iframe></p>
<h3><span>FANUC_M710iC_50 機械手臂Remote Api</span></h3>




<h2>week14</h2>
<p>創造第二個雲端 Gitlab(第二次備份)</p>
<h4>Gitlab 同步</h4>
<p>要利用 Gitlab 同步位於 Github 上的 CMSiMDE 倉儲與 Github Pages 網頁, 需要注意以下兩個要點:</p>
<ol>
<li>完成<span>   </span><span> </span>帳號申請與驗證.</li>
<li>在原先 Github 倉儲中增加一個 .gitlab-ci.yml 檔案, 目的是用來產生與倉儲對應的 Gitlab Pages 網站.</li>
</ol>
<p>step1. 申請帳號</p>
<p><img alt="" height="338" src="/images/gitlab1.jpg" width="565"/></p>
<p>step2. 設定(記得設為Private)</p>
<p></p>
<p><img alt="" height="549" src="/images/gitlab2.jpg" width="574"/></p>
<p>step3. 把github的資料推到Gitlab上面</p>
<p><img alt="" height="142" src="/images/gitlab3.jpg" width="571"/></p>
<p></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">Y:\&gt;G:

G:\cd2021\kmol2021_spring_v2\kmol2021_spring_v2&gt;cd data

G:\cd2021\kmol2021_spring_v2\kmol2021_spring_v2\data&gt;cd tmp

G:\cd2021\kmol2021_spring_v2\kmol2021_spring_v2\data\tmp&gt;cd cd2021

G:\cd2021\kmol2021_spring_v2\kmol2021_spring_v2\data\tmp\cd2021&gt;git push gitlab
</pre>
<p></p>
<h2>week15</h2>
<p></p>
<h3>part 1-joint</h3>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/IKOGwoJ2HLk" title="YouTube video player" width="560"></iframe></p>
<p>We saw this simple two-link robot in the previous lecture about forward kinematics.</p>
<p>我們在上一堂關於正向運動學的講座中看到了這個簡單的雙連桿機器人</p>
<p>The tooltip pose of this robot is discribed simply by two number ,the coordinates x and y with</p>
<p>respect to the world coordinate frame.</p>
<p>這個機器人的工具提示位姿簡單地由兩個數字來描述，坐標 x 和 y 與相對於世界坐標系。</p>
<p>So, the problem here is that given x and y, we want to determine the joined angles, Q1 and</p>
<p>Q2.  </p>
<p>所以，這裡的問題是給定 x 和 y，我們想要確定連接角 Q1 和 Q2。</p>
<p>The solution that we're going to follow in this particular section is a geometric</p>
<p>我們將在本節中遵循的解決方案是幾何</p>
<p>ONE. We're going to start with a simple piece of construction.</p>
<p>一。 我們將從一個簡單的結構開始。</p>
<p><span>We're going to overlay the red triangle on top of our robot.</span></p>
<p><span>我們將在我們的機器人頂部覆蓋紅色三角形。</span></p>
<p><span>We know that the end point coordinate is x, y, so the vertical height of the triangle is y,horizontal width is x.</span></p>
<p><span>我們知道終點坐標是x，y，所以三角形的垂直高度是y，水平寬度是x。</span></p>
<p><span>And, using Pythagoras theorem, we can write thagoras r squared equals x squared plus y squared.</span></p>
<p><span>並且，使用畢達哥拉斯定理，我們可以寫出 畢氏定理  r 平方等於 x 平方加 y 平方。</span></p>
<p><span>So far.so easy. Now, we're going to look at this triangle highlighted here in red and we want to determine the angle alpha.</span></p>
<p><span></span>到目前為止，很容易。 現在，我們將查看此處以紅色突出顯示的三角形，我們要確定角度α。</p>
<p><span>In order to do that, we need to use the cosine rule.</span></p>
<p><span>為了做到這一點，我們需要使用 cos 規則。</span></p>
<p><span>And, if you're a little rusty on the cosine rule, here is a bit of a refresher.</span></p>
<p><span>而且，如果你對 cos 規則有點生疏，這裡有一點複習。</span></p>
<p><span>We have an arbitrary triangle.</span></p>
<p>我們有一個任意三角形。</p>
<p><span>We don't have to have any right angles in it and we're going to label the length of this edge as A and the angle opposite that edge, we're going to label as little a.</span></p>
<p><span></span>我們不必在其中有任何直角，我們將這條邊的長度標記為 A，而與該邊相對的角度，我們將標記為小 a。</p>
<p><span>And, we do the same for this edge and this angle, and this edge and this angle.</span></p>
<p><span>並且，我們對這條邊和這個角，以及這條邊和這個角做同樣的事情。</span></p>
<p><span>So, all together, the sides are labelled capitals A, B and C, and the angles are labelled little a, little b, and little c.</span></p>
<p><span>因此，所有邊都標記為大寫字母 A、B 和 C，角標記為小 a、小 b 和小 c。</span></p>
<p><span>So, the cosine rule is simply this relationship here.</span></p>
<p><span>所以，cos 規則就是這裡的這種關係。</span></p>
<p><span>It's a bit like Pythagoras' theorem except for this extra term on the end with the cos a in it.</span></p>
<p><span></span>它有點像畢達哥拉斯的定理，除了最後一個額外的術語，其中有 cos a。</p>
<p><span>Now, let's apply the cosine rule to the particular triangle we looked at a moment rul ago.</span></p>
<p><span>現在，讓我們將 cos 規則應用於我們剛才看到的特定三角形。</span></p>
<p><span>It's pretty straightforward to write down this particular relationship.</span></p>
<p><span>寫下這種特殊關係非常簡單。</span></p>
<p><span>We can isolate the term cos alpha which gives us the angle alpha that we're interested in.</span></p>
<p><span>我們可以分離出術語 cos α，它為我們提供了我們感興趣的角度 α。</span></p>
<p><span>And, it's defined in terms of the constant link lengths, A1 and A2 and the position of the end effector,x and y.</span></p>
<p><span>而且，它是根據恆定連桿長度 A1 和 A2 以及末端執行器的位置 x 和 y 定義的。</span></p>
<p><span>We can write this simple relationship between the angles alpha and Q2.</span></p>
<p><span>我們可以寫出角度 α 和 Q2 之間的這種簡單關係。</span></p>
<p><span>And, we know from the shape of the cosine function that cos of Q2 must be equal to negative of cos alpha.</span></p>
<p><span>而且，我們從餘弦函數的形狀知道，Q2 的 cos 必須等於 cos α 的負值。</span></p>
<p><span>This time, let's just write an expression for the cosine of the joined angle Q2.</span></p>
<p><span>這一次，讓我們為連接角 Q2 的cos寫一個表達式。</span></p>
<p><span>Now, we're going to draw yet another red triangle and we're going apply some simple trigonometry here.</span></p>
<p><span>現在，我們將繪製另一個紅色三角形，並在此處應用一些簡單的三角函數。</span></p>
<p><span>If we know Q2, then we know this length and this length of the red triangle.</span></p>
<p><span>如果我們知道 Q2，那麼我們就知道這個長度和這個紅色三角形的長度。</span></p>
<p><span>We can write this relationship for the sine of the joined angle Q2.</span></p>
<p><span>我們可以為連接角 Q2 的 sin 寫出這種關係。</span></p>
<p><span>Now, we can consider this bigger triangle whose angle is beta and this side length of the triangle is given here in blue.</span></p>
<p><span>現在，我們可以考慮這個更大的三角形，它的角是β，三角形的這條邊長在這裡用藍色給出。</span></p>
<p><span>And, the length of the other side of the triangle is this.</span></p>
<p><span>並且，三角形另一邊的長度是這個。</span></p>
<p><span>So, now we can write an expression for the angle beta in terms of these parameters here.</span></p>
<p><span></span>所以，現在我們可以在此處根據這些參數編寫角度 <span>β</span> 的表達式。</p>
<p><span>Going back to the red triangle that we drew earlier, we can establish a relationship between Q1 and the angle beta.</span></p>
<p><span>回到我們之前畫的紅色三角形，我們可以建立 Q1和角度 β 之間的關係。</span></p>
<p><span>Introduce yet another angle, this one gamma and we can write a relationship between the angle gamma and the tooltip coordinates x and y.</span></p>
<p><span>引入另一個角度，這個 ɣ，我們可以寫出角度 ɣ 和工具提示坐標 x 和 y 之間的關係。</span></p>
<p><span>Now, we can write a simple relationship between the angles that we've constructed, gamma and beta and the joined angle we're interested in which is Q1.</span></p>
<p><span></span>現在，我們可以在我們構建的角度 <span>ɣ </span>和 <span>β</span> 與我們感興趣的連接角度 Q1 之間寫出一個簡單的關係。</p>
<p><span>And, the total relationship looks something like this.</span></p>
<p><span>而且，整個關係看起來像這樣。</span></p>
<p><span>Quite a complex relationship, it gives us the angle of joined one, that's Q1 in terms of the end effector coordinates y and x, and a bunch of constants, a1 and a2, and it's also a function of the second joint angle, Q2.</span></p>
<p><span>相當複雜的關係，它為我們提供了連接的角度，即根據末端執行器坐標 y 和 x 的 Q1，以及一系列常量 a1 和 a2，它也是第二個關節角度 Q2 的函數。</span></p>
<p><span>So, let's summarize what it is that we have derived here.1</span></p>
<p><span>所以，讓我們總結一下我們在這裡得出的結論。1</span></p>
<p><span>We have an expression for the cosine of Q2 and we have an expression for Q1.</span></p>
<p><span>我們有 Q2 的 cos 表達式和 Q1 的表達式。</span></p>
<p><span>Now, the cosine function is symmetrical about 0.</span></p>
<p><span>現在，cos 函數關於 0 對稱。</span></p>
<p><span>So, if we know the value of the cosine of Q2, then there are two possible solutions, a positive angle and a negative angle</span></p>
<p><span>所以，如果我們知道 Q2 的 cos 值，那麼有兩種可能的解，一個正角和一個負角</span></p>
<p><span>We're going to explicitly choose the positive angle, which means that I can write this expression here.</span></p>
<p><span>我們將明確選擇正角，這意味著我可以在這裡寫這個表達式。</span></p>
<p><span>And now, we have what we call the inverse kinematic solution for this two-link robot.</span></p>
<p><span>現在，我們有了這個雙連桿機器人的逆運動學解決方案。</span></p>
<p><span>We have an expression for the two joined angles, Q1 and Q2 in terms of the end effector pose x and y, and a bunch of constants.</span></p>
<p><span>我們有兩個連接角 Q1 和 Q2 的表達式，根據末端執行器姿勢 x 和 y 以及一系列常數。</span></p>
<p><span>You notice that the two equations are not independent.</span></p>
<p><span>你注意到這兩個方程不是獨立的。</span></p>
<p><span>The equation for Q1, in fact, depends on the solution for Q2.</span></p>
<p><span>事實上，Q1 的方程取決於 Q2 的解。</span></p>
<p><span>In this case, Q2 is negative and we're going to write the solution for Q2 with a negative sign in front of the inverse cosine.</span></p>
<p><span>在這種情況下，Q2 是負數，我們將在反 cos 前用負號編寫 Q2 的解。</span></p>
<p><span>Now, we need to solve for Q1, so we're going to introduce this particular red triangle, the angle beta that we solved previously, and the angle gamma which is defined in terms of y and x.</span></p>
<p><span>現在，我們需要求解 Q1，因此我們將介紹這個特定的紅色三角形、我們之前求解的角度 <span>β</span> 以及根據 y 和 x 定義的角度 ɣ。</span></p>
<p><span>Now, we write a slightly different relationship between q1, gamma and beta, different to what we had before.</span></p>
<p><span>現在，我們在 q1、ɣ  和 β 之間寫出略有不同的關係，與我們之前的關係不同。</span></p>
<p><span>There’s a change of sign involved.</span></p>
<p><span>涉及到符號的變化。</span></p>
<p><span>Then, we can substitute all that previous equation and come up with this expression for q1.</span></p>
<p><span>然後，我們可以替換之前的所有等式，並得出 q1 的這個表達式。</span></p>
<p><span>Again, there is a change of sign here.</span></p>
<p><span>同樣，這裡的符號發生了變化。</span></p>
<p><span>Previously, this was a negative sign.</span></p>
<p><span>以前，這是一個負面信號。</span></p>
<p><span>And, here in summary form is the solution for the inverse kinematics of our two-link robot when it is in this particular configuration, where q2 is negative.</span></p>
<p><span>並且，這裡總結性地是我們的雙連桿機器人在這種特定配置下的逆運動學的解決方案，其中 q2 是負數。</span></p>
<p><span>Let’s compare the two solutions, the case where q2 is positive and the case where q2 is negative.</span></p>
<p><span>讓我們比較兩個解決方案，q2 為正的情況和 q2 為負的情況。</span></p>
<h3>part 2-joint</h3>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/eIZuz1XCd0w" title="YouTube video player" width="560"></iframe></p>
<p></p>
<p><span>Here we have the same two link robot as we just looked at but this time we're going tosolve it using an analytical approach , that is we're going to rely much more on algebra ,particular linear algebra rather than geometry .</span></p>
<p><span></span>在這裡，我們有與剛剛看到的相同的兩連桿機器人，但這次我們將使用分析方法來解決它，也就是說，我們將更多地依賴代數，特別是線性代數而不是幾何。</p>
<p><span>We have an expression E , which is the homogeneous transformation which represents the pose of the robots endefector and we looked at this in the last lecture , we can write the endefector pose as a sequence of elementary homogeneous transformations .</span></p>
<p><span></span>我們有一個表達式 E，它是表示機器人末端位姿的齊次變換，我們在上一課中看到了這一點，我們可以將末端位姿寫為一系列基本齊次變換。</p>
<p><span>A rotation by Q1 , a translation along the X direction by A1 , a rotation by Q2 and then a translation in the X direction by A2 .</span></p>
<p><span></span>Q1 旋轉，A1 沿 X 方向平移，Q2 旋轉，然後 A2 沿 X 方向平移。</p>
<p><span>If I expand this out , multiply all the transformations together , I get the expression shown here ; a three by three homogeneous transformation matrix representing the pose of the robot's endefector.</span></p>
<p><span></span>如果我將其展開，將所有變換相乘，就會得到此處所示的表達式； 一個三乘三的齊次變換矩陣，表示機器人的終結者的姿態</p>
<p><span>Now for this particular two link robot , we are only interested in the position of its endefector , it's X and Y co - ordinate and they are these two elements within the homogeneous transformation matrix , so I'm going to copy those out .</span></p>
<p><span>現在對於這個特殊的兩連桿機器人，我們只對它的末端位置感興趣，它是 X 和 Y 坐標，它們是齊次變換矩陣中的這兩個元素，所以我將把它們複製出來。</span></p>
<p><span>So here again is our expression for X and Y and what we're going to do is a fairly common trick , we're going to square and add these two equations and I get a relationship that looks like this .</span></p>
<p><span>所以這裡又是我們對 X 和 Y 的表達式，我們要做的是一個相當常見的技巧，我們要平方並添加這兩個方程，我得到一個看起來像這樣的關係。</span></p>
<p><span>Now I can solve for the joint angle Q2 in terms of the endefector pose X and Y and the robot's constants A1 and A2.</span></p>
<p>現在我可以根據末端姿勢 X 和 Y 以及機器人的常數 A1 和 A2 來求解關節角度 Q2。</p>
<p><span>Now what I'm going to do is apply the sum of angles identity .</span></p>
<p><span></span>現在我要做的是應用角度之和 。</p>
<p><span>I'm going to expand these terms, sine of Q1 plus Q2 or cos of Q1 plus Q2 and to make life a little bit easier, I'm going to make some substations, so where ever I had cos Q2, I'm going to write C2 and where ever I had sine Q2, I'm going to write S2.</span></p>
<p><span>我將擴展這些術語，Q1 的sin加 Q2 或 Q1 的 cos 加 Q2，為了讓生活更輕鬆一點，我將建造一些變電站，所以只要有 cos Q2，我就會去 寫 C2 並且在我有正弦 Q2 的地方，我要寫 S2。</span></p>
<p><span>It's a fairly common shorthand when people are looking at robot kinematic equations.</span></p>
<p><span></span>當人們查看機器人運動學方程時，這是一個相當常見的速記。</p>
<p><span>And here are the equations after making those substitutions.</span></p>
<p><span>這是進行這些替換後的方程式。</span></p>
<p><span>Looking at these two equations, I can see that they fall into a very well known form and for that form there is a very well known solution.</span></p>
<p><span>看看這兩個方程，我可以看到它們屬於一個眾所周知的形式，對於這種形式，有一個眾所周知的解決方案。</span></p>
<p><span>So I'm going to consider just one of the equations, the equation for Y and using our well known identity and it's solution, I can determine the values for the variables little a, little b and little c and once l've determined those, then I can just write down the solution for Q1, which x is the equivalent of theta in this particular case.</span></p>
<p>所以我將只考慮其中一個方程，Y 的方程，並使用我們眾所周知的恆等式和它的解，我可以確定變量小 a、小 b 和小 c 的值，一旦我確定了這些 ，然後我可以寫下 Q1 的解決方案，在這種特殊情況下，x 相當於 θ。</p>
<p><span>Here again is our expression for Q1, copied over from the previous slide and we may remember from earlier in our workings that we determined this particular relationship; X squared plus Y squared is equal to this particular complex expression.</span></p>
<p><span>這裡再次是我們對 Q1 的表達，從上一張幻燈片複製過來，我們可能還記得在我們工作的早期，我們確定了這種特殊關係； X 平方加 Y 平方等於這個特定的複雜表達式。</span></p>
<p><span>So I can substitute that in and do some simplification and I end up with this slightly less complex expression for Q1.</span></p>
<p><span>因此，我可以將其替換並進行一些簡化，最終得到 Q1 的這個稍微不那麼複雜的表達式。</span></p>
<p><span>And it is the same expression that I got following the geometric approach in the previous section.</span></p>
<p><span>這與我在上一節中遵循幾何方法得到的表達式相同。</span></p>
<p><span></span></p>
<h2>week16</h2>
<h3>Fossil</h3>
<p>step1  download <a href="https://fossil-scm.org/home/uv/download.html"> Fossil</a> 存到 Y 槽</p>
<p>step2 打指令 </p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">1. G:\cd2021\kmol2021_spring_v2\kmol2021_spring_v2\data\tmp\W16\fossil&gt; 
2. fossil clone https://40823111@fossil.kmol.info/u/cda cda.fossil
3.mkdir cda
4.G:\cd2021\kmol2021_spring_v2\kmol2021_spring_v2\data\tmp\W16\fossil\wd\cda&gt;
5.fossil open ./../../cda.fossil
6. 確定有fossil的檔案 然後把倉儲的資料cd2021裡面的東西全部複製到cda的目錄下
7.fossil add .
8.fossil commit -m"檔案名稱 "
9.確定推上去就成功了
10. 開啟網頁 https://fossil.kmol.info/u/cda/doc/trunk/index.html
</pre>
<p><img alt="" height="292" src="/images/cmd_0ikTvGyyWk.png" width="571"/></p>
<p><img alt="" height="291" src="/images/cmd_6WMKL3fgy4.png" width="569"/></p>
<h3>w16</h3>
<h4>MTB_robot 的取放方塊流程規劃 (Process Planning):</h4>
<h4>1. Onshape 零組件繪製 (20%)</h4>
<p>零組件必須在<span> </span><a href="https://www.onshape.com/">Onshape</a><span> </span>繪圖, 並提供可公開分享之零組件連結於頁面及回報區中.</p>
<h4>2. 建立 CoppeliaSim 4.1.0 MTB robot 場景 (20%)</h4>
<p>請以自行繪製之零件輸入 CoppeliaSim 後, 組合為 MTB robot 模型, 並利用 Leo Editor 以 require 導入 Lua 程式運作, 分別控制各軸轉動示範, 所完成的所有檔案請存入 W16_exam 後壓縮為 W16_exam.7z 後送至個人 @gm 帳號下的 Google Drive 後將連結設為任何人皆可下載, 並將連結與操作嵌入影片放在 W16 頁面與回報區中 .</p>
<h4>3. 手臂末端加入 components-gripper-suction pad 吸盤 (20%)</h4>
<p>請接續上述 MTB robot, 在其末端接上 force sensor 後接上標準 suction pad 後, 分別導入 W15 週線上課程之鍵盤控制程式後, 拍攝影片示範 W15 線上課程中之操作與示範過程.</p>
<h4>4. 逆向運動學函式 (20%)</h4>
<p>請根據 W15 線上課程內容之 Inverse Kinematics 方程式 (<a href="https://www.youtube.com/watch?v=IKOGwoJ2HLk&amp;t=35s">影片1</a><span> </span>或<a href="https://www.youtube.com/watch?v=eIZuz1XCd0w&amp;t=183s">影片2</a>), 以程式指定方塊取放之兩個位置 - (0.2, 0.7, 0.05) 與 (-0.3, -0.55, 0.05), 以前述 Leo Editor Lua 程式編寫方法, 分別採鍵盤控制與程式迴圈方式執行 W15 兩個指定位置之方塊取放.</p>
<h4>5. Python remote API 逆向運動學函式 (20%)</h4>
<p>請利用 Python remote API 程式重現以迴圈方式執行 W15 兩個指定位置之方塊取放.</p>
<p></p>